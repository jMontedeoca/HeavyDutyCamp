"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTransferInstructions = void 0;
// Import necessary modules from @solana/spl-token and @solana/web3.js
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
/**
 * Creates a list of transaction instructions for transferring SPL tokens, optionally creating the receiver's associated token account and attaching a memo.
 * @param {CreateTransferInstructionsParams} params - The parameters for creating the transfer instructions.
 * @returns {TransactionInstruction[]} An array of transaction instructions to be added to a transaction.
 */
function createTransferInstructions(params) {
    var _a;
    // Retrieve the associated token account public key for the sender
    const senderAssociatedTokenPubkey = (0, spl_token_1.getAssociatedTokenAddressSync)(new web3_js_1.PublicKey(params.mintAddress), new web3_js_1.PublicKey(params.senderAddress));
    // Retrieve the associated token account public key for the receiver
    const receiverAssociatedTokenPubkey = (0, spl_token_1.getAssociatedTokenAddressSync)(new web3_js_1.PublicKey(params.mintAddress), new web3_js_1.PublicKey(params.receiverAddress));
    // Initialize an array to hold the transfer instructions
    const transferInstructions = [];
    // If fundReceiver is true, add an instruction to create the receiver's associated token account idempotently
    if (params.fundReceiver) {
        transferInstructions.push((0, spl_token_1.createAssociatedTokenAccountIdempotentInstruction)(new web3_js_1.PublicKey((_a = params.payerAddress) !== null && _a !== void 0 ? _a : params.senderAddress), receiverAssociatedTokenPubkey, new web3_js_1.PublicKey(params.receiverAddress), new web3_js_1.PublicKey(params.mintAddress)));
    }
    // Add the transfer instruction
    transferInstructions.push((0, spl_token_1.createTransferInstruction)(senderAssociatedTokenPubkey, receiverAssociatedTokenPubkey, new web3_js_1.PublicKey(params.senderAddress), params.amount));
    // If a memo is provided, add a memo instruction
    if (params.memo) {
        transferInstructions.push(new web3_js_1.TransactionInstruction({
            keys: [
                {
                    pubkey: new web3_js_1.PublicKey(params.senderAddress),
                    isSigner: true,
                    isWritable: true,
                },
            ],
            data: Buffer.from(params.memo, 'utf-8'),
            programId: new web3_js_1.PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr'),
        }));
    }
    // Return the array of transaction instructions
    return transferInstructions;
}
exports.createTransferInstructions = createTransferInstructions;
//# sourceMappingURL=create-transfer-instructions.js.map